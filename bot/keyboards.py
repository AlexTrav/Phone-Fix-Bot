from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from bot.db.database import db


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

# –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATES_LIST = []


# –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
def add_state(state):
    STATES_LIST.append(state)


# –£–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
def delete_state():
    STATES_LIST.pop(-1)


# –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
def delete_all_states():
    STATES_LIST.clear()


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
def get_keyboard(state, **kwargs):
    if state == 'UserStatesGroup:start':
        return get_user_start_keyboard()
    if state == 'UserStatesGroup:repair':
        return get_repairs_catalog_keyboard()
    if state == 'UserStatesGroup:repair_item':
        return get_repair_item_keyboard(kwargs['service_id'])
    if state == 'UserStatesGroup:to_order':
        return get_phone_models_category_keyboard()
    if state == 'UserStatesGroup:accessories_catalog':
        return get_accessories_catalog_keyboard()
    if state == 'UserStatesGroup:accessories':
        return get_accessories_keyboard(kwargs['catalog_id'])
    if state == 'UserStatesGroup:select_orders':
        return get_select_orders_keyboard()
    if state == 'UserStatesGroup:desired':
        return get_desired_keyboard(kwargs['user_id'])
    if state == 'UserStatesGroup:orders_repair':
        return get_orders_repair(kwargs['user_id'])


# USER

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã "start"
def get_user_start_keyboard():
    answer = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Phone Fix Bot!'
    start_keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text='üõ† –†–µ–º–æ–Ω—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ üì±', callback_data='repairs_catalog')],
        [InlineKeyboardButton(text='–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã üì≤', callback_data='accessories_catalog')],
        [InlineKeyboardButton(text='–ó–∞–∫–∞–∑—ã üìù', callback_data='orders')],
        [InlineKeyboardButton(text='–ü–æ–∏—Å–∫ üîç', callback_data='search')],
        [InlineKeyboardButton(text='–û –Ω–∞—Å üë§', callback_data='about')]
    ])
    return answer, start_keyboard


# –í–µ—Ç–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥
def get_repairs_catalog_keyboard():
    cb = CallbackData('repairs_catalog', 'id', 'action')
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–º–æ–Ω—Ç–∞:'
    repairs_catalog_keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = []
    i = 0
    for category in db.get_data(table='repairs_catalog'):
        buttons.append(InlineKeyboardButton(text=category[1], callback_data=cb.new(id=category[0], action='category')))
        i += 1
    repairs_catalog_keyboard.add(*buttons).add(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back')))
    return answer, repairs_catalog_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ª—É–≥–∏
def get_repair_item_keyboard(service_id):
    cb = CallbackData('repair_item', 'id', 'action')
    service = db.get_data(table='repairs_catalog', where=1, op1='id', op2=service_id)[0]
    answer = f'''–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {service[1]}; \n–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {service[2]}; \n–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: {service[3]}‚Ç∏.'''.lstrip(' ')
    repair_item_keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å üìù', callback_data=cb.new(id=service[0], action='order'))],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back'))]
    ])
    return answer, repair_item_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ª–µ–æ—Ñ–æ–Ω–æ–≤
def get_phone_models_category_keyboard():
    cb = CallbackData('category_models', 'id', 'action')
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä—ç–Ω–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
    phone_models_category_keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = []
    for category_model in db.get_data(table='phone_models_category'):
        buttons.append(InlineKeyboardButton(text=category_model[1], callback_data=cb.new(id=category_model[0], action='category')))
    phone_models_category_keyboard.add(*buttons).add(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back')))
    return answer, phone_models_category_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def get_phone_models_keyboard(category_model_id):
    cb = CallbackData('models', 'id', 'action')
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
    phone_models_keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = []
    for model in db.get_data(table='phone_models', where=1, op1='id', op2=category_model_id):
        buttons.append(InlineKeyboardButton(text=model[2], callback_data=cb.new(id=model[0], action='model')))
    phone_models_keyboard.add(*buttons).add(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back')))
    return answer, phone_models_keyboard


# –í–µ—Ç–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
def get_accessories_catalog_keyboard():
    cb = CallbackData('accessories_catalog', 'id', 'action')
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤:'
    accessories_catalog_keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = []
    for catalog in db.get_data(table='accessories_catalog'):
        buttons.append(InlineKeyboardButton(text=catalog[1], callback_data=cb.new(id=catalog[0], action='catalog')))
    accessories_catalog_keyboard.add(*buttons).add(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back')))
    return answer, accessories_catalog_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
def get_accessories_keyboard(catalog_id):
    cb = CallbackData('accessories', 'id', 'action')
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä:'
    accessories_keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = []
    for accessory in db.get_data(table='accessories', where=1, op1='catalog_id', op2=catalog_id):
        buttons.append(InlineKeyboardButton(text=accessory[2], callback_data=cb.new(id=accessory[0], action='catalog')))
    accessories_keyboard.add(*buttons).add(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back')))
    return answer, accessories_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
def get_accessory_keyboard(accessory_id, user_id):
    cb = CallbackData('accessory', 'id', 'action')
    accessory = db.get_data(table='accessories', where=1, op1='id', op2=accessory_id)[0]
    answer = f'–ê–∫—Å–µ—Å—Å—É–∞—Ä: {accessory[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {accessory[3]}\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {accessory[4]}\n–¶–µ–Ω–∞: {accessory[5]}‚Ç∏'
    accessory_keyboard = InlineKeyboardMarkup(row_width=1)
    if db.is_accessory_in_user(user_id=user_id, accessory_id=accessory_id):
        accessory_keyboard.add(InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å –∏–∑ –∂–µ–ª–∞–µ–º–æ–≥–æ', callback_data=cb.new(id=accessory[0], action='delete_desired')))
    else:
        accessory_keyboard.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∂–µ–ª–∞–µ–º–æ–µ', callback_data=cb.new(id=accessory[0], action='add_desired')))
    accessory_keyboard.add(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back')))
    return answer, accessory_keyboard, accessory[6]


# –í–µ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
def get_select_orders_keyboard():
    cb = CallbackData('select_orders', 'action')
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤:'
    select_orders_keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text='–ó–∞–∫–∞–∑—ã —É—Å–ª—É–≥ –Ω–∞ —Ä–µ–º–æ–Ω—Ç', callback_data=cb.new(action='orders_repair'))],
        [InlineKeyboardButton(text='–ñ–µ–ª–∞–µ–º–æ–µ', callback_data=cb.new(action='desired'))],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(action='back'))]
    ])
    return answer, select_orders_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ user-–∞
def get_desired_keyboard(user_id):
    cb = CallbackData('desired', 'id', 'action')
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ:'
    desired_keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = []
    for desire in db.get_data(table='desired', where=1, op1='user_id', op2=user_id):
        accessory = db.get_data(table='accessories', where=1, op1='id', op2=desire[2])[0]
        buttons.append(InlineKeyboardButton(text=accessory[2], callback_data=cb.new(id=accessory[0], action='catalog')))
    desired_keyboard.add(*buttons).add(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back')))
    return answer, desired_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ —É—Å–ª—É–≥ –Ω–∞ —Ä–µ–º–æ–Ω—Ç
def get_orders_repair(user_id):
    cb = CallbackData('orders_repair', 'id', 'action')
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —É—Å–ª—É–≥—É:'
    orders_repair_keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = []
    for order_repair in db.get_data(table='orders_repair', where=1, op1='user_id', op2=user_id):
        repair = db.get_data(table='repairs_catalog', where=1, op1='id', op2=order_repair[2])[0]
        buttons.append(InlineKeyboardButton(text=repair[1], callback_data=cb.new(id=order_repair[0], action='catalog')))
    orders_repair_keyboard.add(*buttons).add(InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back')))
    return answer, orders_repair_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥ –Ω–∞ —Ä–µ–º–æ–Ω—Ç
def get_order_repair(order_id):
    cb = CallbackData('order_repair', 'id', 'action')
    order_repair = db.get_data(table='orders_repair', where=1, op1='id', op2=order_id)[0]
    repair = db.get_data(table='repairs_catalog', where=1, op1='id', op2=order_repair[2])[0]
    model = db.get_data(table='phone_models', where=1, op1='id', op2=order_repair[3])[0]
    is_processed = ['–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω'][order_repair[4]]
    is_completed = ['–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω', '–í—ã–ø–æ–ª–Ω–µ–Ω'][order_repair[5]]
    answer = f'–ó–∞–∫–∞–∑ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {order_repair[0]}\n–ó–∞–∫–∞–∑–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞: {repair[1]}\n–ù–∞ –º–æ–¥–µ–ª—å: {model[2]}\n–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: {repair[3]}‚Ç∏\n–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {is_processed}\n–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {is_completed}'
    order_repair_keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=cb.new(id=order_repair[0], action='cancel_order'))],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=cb.new(id=-1, action='back'))]
    ])
    return answer, order_repair_keyboard


# –í–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞

# –í–µ—Ç–∫–∞ –æ –Ω–∞—Å


# MANAGER

def get_manager_start_keyboard():
    answer = '–ú–µ–Ω–µ–¥–∂–µ—Ä! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Phone Fix Bot!'
    start_manager_ikm = InlineKeyboardMarkup(inline_keyboard=[
    ])
    return answer, start_manager_ikm
